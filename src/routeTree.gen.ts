/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthedImport } from './routes/_authed'
import { Route as publicRegisterImport } from './routes/(public)/register'
import { Route as publicLoginImport } from './routes/(public)/login'
import { Route as AuthedProblemsIndexImport } from './routes/_authed/problems/index'
import { Route as AuthedProblemsScreenImport } from './routes/_authed/problems/_screen'
import { Route as AuthedProblemsScreenSlugImport } from './routes/_authed/problems/_screen.$slug'

// Create Virtual Routes

const AuthedProblemsImport = createFileRoute('/_authed/problems')()

// Create/Update Routes

const AuthedRoute = AuthedImport.update({
  id: '/_authed',
  getParentRoute: () => rootRoute,
} as any)

const AuthedProblemsRoute = AuthedProblemsImport.update({
  id: '/problems',
  path: '/problems',
  getParentRoute: () => AuthedRoute,
} as any)

const publicRegisterRoute = publicRegisterImport.update({
  id: '/(public)/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const publicLoginRoute = publicLoginImport.update({
  id: '/(public)/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthedProblemsIndexRoute = AuthedProblemsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthedProblemsRoute,
} as any)

const AuthedProblemsScreenRoute = AuthedProblemsScreenImport.update({
  id: '/_screen',
  getParentRoute: () => AuthedProblemsRoute,
} as any)

const AuthedProblemsScreenSlugRoute = AuthedProblemsScreenSlugImport.update({
  id: '/$slug',
  path: '/$slug',
  getParentRoute: () => AuthedProblemsScreenRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedImport
      parentRoute: typeof rootRoute
    }
    '/(public)/login': {
      id: '/(public)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof publicLoginImport
      parentRoute: typeof rootRoute
    }
    '/(public)/register': {
      id: '/(public)/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof publicRegisterImport
      parentRoute: typeof rootRoute
    }
    '/_authed/problems': {
      id: '/_authed/problems'
      path: '/problems'
      fullPath: '/problems'
      preLoaderRoute: typeof AuthedProblemsImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/problems/_screen': {
      id: '/_authed/problems/_screen'
      path: '/problems'
      fullPath: '/problems'
      preLoaderRoute: typeof AuthedProblemsScreenImport
      parentRoute: typeof AuthedProblemsRoute
    }
    '/_authed/problems/': {
      id: '/_authed/problems/'
      path: '/'
      fullPath: '/problems/'
      preLoaderRoute: typeof AuthedProblemsIndexImport
      parentRoute: typeof AuthedProblemsImport
    }
    '/_authed/problems/_screen/$slug': {
      id: '/_authed/problems/_screen/$slug'
      path: '/$slug'
      fullPath: '/problems/$slug'
      preLoaderRoute: typeof AuthedProblemsScreenSlugImport
      parentRoute: typeof AuthedProblemsScreenImport
    }
  }
}

// Create and export the route tree

interface AuthedProblemsScreenRouteChildren {
  AuthedProblemsScreenSlugRoute: typeof AuthedProblemsScreenSlugRoute
}

const AuthedProblemsScreenRouteChildren: AuthedProblemsScreenRouteChildren = {
  AuthedProblemsScreenSlugRoute: AuthedProblemsScreenSlugRoute,
}

const AuthedProblemsScreenRouteWithChildren =
  AuthedProblemsScreenRoute._addFileChildren(AuthedProblemsScreenRouteChildren)

interface AuthedProblemsRouteChildren {
  AuthedProblemsScreenRoute: typeof AuthedProblemsScreenRouteWithChildren
  AuthedProblemsIndexRoute: typeof AuthedProblemsIndexRoute
}

const AuthedProblemsRouteChildren: AuthedProblemsRouteChildren = {
  AuthedProblemsScreenRoute: AuthedProblemsScreenRouteWithChildren,
  AuthedProblemsIndexRoute: AuthedProblemsIndexRoute,
}

const AuthedProblemsRouteWithChildren = AuthedProblemsRoute._addFileChildren(
  AuthedProblemsRouteChildren,
)

interface AuthedRouteChildren {
  AuthedProblemsRoute: typeof AuthedProblemsRouteWithChildren
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedProblemsRoute: AuthedProblemsRouteWithChildren,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof AuthedRouteWithChildren
  '/login': typeof publicLoginRoute
  '/register': typeof publicRegisterRoute
  '/problems': typeof AuthedProblemsScreenRouteWithChildren
  '/problems/': typeof AuthedProblemsIndexRoute
  '/problems/$slug': typeof AuthedProblemsScreenSlugRoute
}

export interface FileRoutesByTo {
  '': typeof AuthedRouteWithChildren
  '/login': typeof publicLoginRoute
  '/register': typeof publicRegisterRoute
  '/problems': typeof AuthedProblemsIndexRoute
  '/problems/$slug': typeof AuthedProblemsScreenSlugRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_authed': typeof AuthedRouteWithChildren
  '/(public)/login': typeof publicLoginRoute
  '/(public)/register': typeof publicRegisterRoute
  '/_authed/problems': typeof AuthedProblemsRouteWithChildren
  '/_authed/problems/_screen': typeof AuthedProblemsScreenRouteWithChildren
  '/_authed/problems/': typeof AuthedProblemsIndexRoute
  '/_authed/problems/_screen/$slug': typeof AuthedProblemsScreenSlugRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/login'
    | '/register'
    | '/problems'
    | '/problems/'
    | '/problems/$slug'
  fileRoutesByTo: FileRoutesByTo
  to: '' | '/login' | '/register' | '/problems' | '/problems/$slug'
  id:
    | '__root__'
    | '/_authed'
    | '/(public)/login'
    | '/(public)/register'
    | '/_authed/problems'
    | '/_authed/problems/_screen'
    | '/_authed/problems/'
    | '/_authed/problems/_screen/$slug'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthedRoute: typeof AuthedRouteWithChildren
  publicLoginRoute: typeof publicLoginRoute
  publicRegisterRoute: typeof publicRegisterRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthedRoute: AuthedRouteWithChildren,
  publicLoginRoute: publicLoginRoute,
  publicRegisterRoute: publicRegisterRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_authed",
        "/(public)/login",
        "/(public)/register"
      ]
    },
    "/_authed": {
      "filePath": "_authed.tsx",
      "children": [
        "/_authed/problems"
      ]
    },
    "/(public)/login": {
      "filePath": "(public)/login.tsx"
    },
    "/(public)/register": {
      "filePath": "(public)/register.tsx"
    },
    "/_authed/problems": {
      "filePath": "_authed/problems",
      "parent": "/_authed",
      "children": [
        "/_authed/problems/_screen",
        "/_authed/problems/"
      ]
    },
    "/_authed/problems/_screen": {
      "filePath": "_authed/problems/_screen.tsx",
      "parent": "/_authed/problems",
      "children": [
        "/_authed/problems/_screen/$slug"
      ]
    },
    "/_authed/problems/": {
      "filePath": "_authed/problems/index.tsx",
      "parent": "/_authed/problems"
    },
    "/_authed/problems/_screen/$slug": {
      "filePath": "_authed/problems/_screen.$slug.tsx",
      "parent": "/_authed/problems/_screen"
    }
  }
}
ROUTE_MANIFEST_END */
